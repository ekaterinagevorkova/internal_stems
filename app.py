# app.py
import io, zipfile, re
from itertools import product, permutations
from urllib.parse import urlparse
from typing import Optional, List, Dict

import streamlit as st
import pandas as pd
from PIL import Image
import requests

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –í–ê–ñ–ù–û: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ set_page_config –∑–∞ –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
st.set_page_config(page_title="Internal tools", layout="wide")

# –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
if "redirected_once" not in st.session_state:
    st.session_state.redirected_once = False

# –í—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
should_redirect = False

if should_redirect and not st.session_state.redirected_once:
    st.session_state.redirected_once = True
    # st.switch_page –µ—Å—Ç—å –Ω–µ –≤–æ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏—è—Ö ‚Äî –∑–∞—â–∏—â–∞–µ–º—Å—è
    try:
        st.switch_page("pages/login.py")
    except Exception:
        st.experimental_rerun()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ query_params (–±–µ–∑ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫)
new_qp = {"tab": "stats"}
try:
    # API –º–µ–Ω—è–ª—Å—è: –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –µ—Å—Ç—å to_dict()/from_dict(), –≤ —Å—Ç–∞—Ä—ã—Ö ‚Äî –Ω–µ—Ç
    if st.query_params.to_dict() != new_qp:
        st.query_params.from_dict(new_qp)
except Exception:
    pass  # –Ω–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º

# –ü–∞—Ä–æ–ª—å
FALLBACK_PASSWORD = "SportsTeam"
PASSWORD = st.secrets.get("password", FALLBACK_PASSWORD)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SHORT.IO –ü–†–ï–°–ï–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SHORTIO_PRESETS: Dict[str, Dict[str, object]] = {
    "sirena.world": {
        "api_key":   "sk_ROGCu7fwKkYVRz5V",
        "domain":    "sirena.world",
        "domain_id": 628828,
    },
    "sprts.cc": {
        "api_key":   "sk_ROGCu7fwKkYVRz5V",
        "domain":    "sprts.cc",
        "domain_id": 216771,
    },
}
DEFAULT_DOMAIN = "sprts.cc"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def shortio_create_link(
    original_url: str,
    title: Optional[str],
    path: Optional[str],
    preset: Dict[str, object],
):
    api_key   = str(preset["api_key"]).strip()
    domain_id = int(preset["domain_id"])
    domain    = str(preset["domain"]).strip()

    if not api_key.startswith("sk_"):
        return {"error": "–ù—É–∂–µ–Ω Secret API Key (sk_...)."}

    if not (original_url.startswith("http://") or original_url.startswith("https://")):
        return {"error": "originalURL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://."}

    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": api_key,
    }
    payload = {
        "originalURL": original_url,
        "domainId": domain_id,
        "domain": domain,
    }
    if title:
        payload["title"] = title.strip()
    if path:
        payload["path"] = path.strip()

    try:
        r = requests.post("https://api.short.io/links", json=payload, headers=headers, timeout=20)
        try:
            data = r.json()
        except Exception:
            data = {"raw_text": r.text}
        if r.status_code >= 400:
            return {"error": f"HTTP {r.status_code}", "details": data}
        return data
    except requests.RequestException as e:
        return {"error": "Network/Request error", "details": str(e)}

def generate_custom_slugs(words_str: str, need: int) -> List[str]:
    """–ò–∑ 2‚Äì3 —Å–ª–æ–≤ —Å–æ–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–∞–≥–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ . - _; –≤—ã–¥–∞—ë–º –¥–æ need —à—Ç—É–∫."""
    words = [w.lower() for w in re.split(r"[\s,]+", words_str.strip()) if w]
    if not (2 <= len(words) <= 3):
        return []
    seps = ['.', '-', '_']
    combos = []
    for p in permutations(words):
        for sep in seps:
            combos.append(sep.join(p))
    combos = sorted(set(combos), key=lambda s: (len(s), s))
    return combos[:need]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def render_tools():
    st.markdown(
        "<div style='text-align: center; margin-bottom: 20px;'>"
        "<img src='https://dumpster.cdn.sports.ru/5/93/bf20303bae2833f0d522d4418ae64.png' width='80'>"
        "</div>",
        unsafe_allow_html=True
    )

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–ï–†–•–ù–Ø–Ø –õ–ò–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    top_left, top_right = st.columns(2)

    with top_left:
        # –ö–û–ù–í–ï–†–¢–û–† (PNG -> WebP)
        st.markdown("<h1 style='color:#28EBA4;'>–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø (PNG ‚Üí WebP)</h1>", unsafe_allow_html=True)
        uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PNG-—Ñ–∞–π–ª—ã", type=["png"], accept_multiple_files=True, key="png_uploader")
        archive_name = st.text_input("–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", placeholder="converted_images", key="zip_name")

        if uploaded_files:
            converted_files, converted_filenames = [], []
            for file in uploaded_files:
                image = Image.open(file).convert("RGBA")
                filename = file.name.rsplit(".", 1)[0]
                buffer = io.BytesIO()
                # –ï—Å–ª–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Pillow –±–µ–∑ WEBP ‚Äî —Ç—É—Ç –±—ã —É–ø–∞–ª–æ.
                # Streamlit Cloud –æ–±—ã—á–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç —Å WEBP, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî try/except.
                try:
                    image.save(buffer, format="WEBP", lossless=True)
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ WEBP: {e}")
                    return
                converted_files.append(buffer.getvalue())
                converted_filenames.append(filename + ".webp")

            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, "w") as zip_file:
                for name, data in zip(converted_filenames, converted_files):
                    zip_file.writestr(name, data)

            final_name = (archive_name.strip() or "converted_images").replace(" ", "_") + ".zip"
            st.download_button("üì¶ –°–ö–ê–ß–ê–¢–¨ –ê–†–•–ò–í", data=zip_buffer.getvalue(), file_name=final_name, mime="application/zip")

    with top_right:
        # –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í HTML
        st.markdown("<h1 style='color:#28EBA4;'>–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í HTML</h1>", unsafe_allow_html=True)
        templates = {
            "FullScreen (320x480)": """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="ad.size" content="width=320px,height=480px">
  <meta name="viewport" content="width=320, initial-scale=1.0">
  <title>AdFox Banner</title>
  <link rel="stylesheet" href="https://dumpster.cdn.sports.ru/0/52/558ad552e5e0256fae54ff7fc6d8c.css">
</head>
<body>
  <a href="%banner.reference_mrc_user1%" target="%banner.target%" style="display:block;width:100%;height:100%;text-decoration:none;cursor:pointer;">
    <div class="banner" style="width:100%;height:100%;">
      <img src="–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï" alt="–±–∞–Ω–Ω–µ—Ä" style="width:100%;height:100%;display:block;">
    </div>
  </a>
</body>
</html>""",
            "Mobile Branding (100%x200px)": """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="ad.size" content="width=100%,height=200px">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AdFox Banner</title>
  <link rel="stylesheet" href="https://dumpster.cdn.sports.ru/e/4d/85f288418a95f555eb5035aebed92.css">
</head>
<body>
  <a href="%banner.reference_mrc_user1%" target="%banner.target%" style="display:block;width:100%;height:100%;text-decoration:none;cursor:pointer;">
    <div class="banner" style="width:100%;height:100%;">
      <img src="–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï" alt="–±–∞–Ω–Ω–µ—Ä" style="width:100%;height:100%;display:block;">
    </div>
  </a>
</body>
</html>""",
            "1Right (300x600)": """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="ad.size" content="width=300px,height=600px">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AdFox Banner</title>
  <link rel="stylesheet" href="https://dumpster.cdn.sports.ru/2/96/4af4f5dcdeb75f36b9197556810c8.css">
</head>
<body>
  <a href="%banner.reference_mrc_user1%" target="%banner.target%" style="display:block;width:100%;height:100%;text-decoration:none;cursor:pointer;">
    <div class="banner" style="width:100%;height:100%;">
      <img src="–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï" alt="–±–∞–Ω–Ω–µ—Ä" style="width:100%;height:100%;display:block;">
    </div>
  </a>
</body>
</html>""",
            "Desktop Branding (1920x1080)": """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="ad.size" content="width=1920,height=1080">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AdFox Banner</title>
  <link rel="stylesheet" href="https://dumpster.cdn.sports.ru/f/a3/a35026ae42d4e609a322ffb220623.css">
</head>
<body>
  <a href="%banner.reference_mrc_user1%" target="%banner.target%" style="display:block;width:100%;height:100%;text-decoration:none;cursor:pointer;">
    <div class="banner" style="width:100%;height:100%;">
      <img src="–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï" alt="–±–∞–Ω–Ω–µ—Ä" style="width:100%;height:100%;display:block;">
    </div>
  </a>
</body>
</html>""",
            "Mobile_top (100%x250px)": """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="ad.size" content="width=100%,height=250px">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AdFox Banner</title>
  <!-- –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–µ –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã.
       –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –±–µ–∑ —Å—Ç–∏–ª–µ–π. -->
  <link rel="stylesheet" href="https://dumpster.cdn.sports.ru/9/58/782b7c244f327056–µ145–¥297c6—Ñ4–±.css">
</head>
<body>
  <a href="%banner.reference_mrc_user1%" target="%banner.target%" style="display:block;width:100%;height:100%;text-decoration:none;cursor:pointer;">
    <div class="banner" style="width:100%;height:100%;">
      <img src="–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï" alt="–±–∞–Ω–Ω–µ—Ä" style="width:100%;height:100%;display:block;">
    </div>
  </a>
</body>
</html>"""
        }
        format_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –±–∞–Ω–Ω–µ—Ä–∞", list(templates.keys()))
        image_url = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–∑—É–∞–ª")
        if image_url and format_choice:
            html_code = templates[format_choice].replace("–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï", image_url)
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, "w") as zf:
                zf.writestr("index.html", html_code)
            st.download_button(
                "üì¶ –°–∫–∞—á–∞—Ç—å ZIP —Å index.html",
                data=zip_buffer.getvalue(),
                file_name=f"{format_choice.replace(' ', '_')}.zip",
                mime="application/zip"
            )

    st.divider()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ò–ñ–ù–Ø–Ø –õ–ò–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    bottom_left, bottom_right = st.columns(2)

    # ======= –õ–ï–í–û: –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–°–´–õ–û–ö =======
    with bottom_left:
        st.markdown("<h1 style='color:#28EBA4;'>–ì–ï–ù–ï–†–ê–¶–ò–Ø –°–°–´–õ–û–ö</h1>", unsafe_allow_html=True)

        base_url = st.text_input("–û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞", key="gen_base_url")
        link_type = st.radio("–¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", ["ref", "utm"], horizontal=True, key="gen_type")

        def parse_multi(value: Optional[str]) -> List[str]:
            if not value:
                return [""]
            if "," in value:
                return [v.strip() for v in value.split(",") if v.strip()]
            if "\n" in value:
                return [v.strip() for v in value.split("\n") if v.strip()]
            if " " in value:
                return [v.strip() for v in value.split(" ") if v.strip()]
            return [value.strip()]

        if link_type == "ref":
            st.markdown("ref-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            show_ref1 = st.checkbox("ref1", value=True, key="toggle_ref1")
            ref_order = ["ref"] + (["ref1"] if show_ref1 else []) + ["ref2", "ref3", "ref4"]
            inputs = {name: st.text_input(name, key=f"ref_{name}") for name in ref_order}
            if not show_ref1:
                inputs["ref5"] = st.text_input("ref5", key="ref_ref5")
            st.caption("–º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ—Ç–¥–µ–ª—è—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            parsed = {k: parse_multi(v) for k, v in inputs.items()}
        else:
            st.markdown("utm-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            keys = ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term"]
            parsed = {key: parse_multi(st.text_input(key, key=f"utm_{key}")) for key in keys}

        generated = []
        varying_key = ""
        if base_url:
            lens = {k: len(v) for k, v in parsed.items() if v}
            max_len = max(lens.values()) if lens else 1
            for k in parsed:
                if len(parsed[k]) == max_len:
                    varying_key = k
                    break

            combined = list(product(*[parsed[k] if parsed[k] else [""] for k in parsed]))
            keys_list = list(parsed.keys())

            for combo in combined:
                params = "&".join([f"{k}={v}" for k, v in zip(keys_list, combo) if v])
                full_url = f"{base_url}?{params}" if params else base_url
                title_val = combo[keys_list.index(varying_key)] if varying_key in keys_list else ""
                generated.append({"title": str(title_val), "url": full_url})

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Å–µ—Å—Å–∏—é –¥–ª—è –±–ª–æ–∫–∞ —Å–æ–∫—Ä–∞—â–∞—Ç–µ–ª—è
        if generated:
            st.session_state.generated_links = generated
        elif "generated_links" not in st.session_state:
            st.session_state.generated_links = []

        # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if st.session_state.generated_links:
            df_gen = pd.DataFrame(
                [{"Title": g["title"], "–∏—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞": g["url"]} for g in st.session_state.generated_links]
            )
            st.dataframe(df_gen, use_container_width=True)

        # –≤—ã–≥—Ä—É–∑–∫–∞ Excel (—Ñ–æ–ª–±—ç–∫ –Ω–∞ CSV –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–≤–∏–∂–∫–∞ Excel)
        if st.session_state.generated_links:
            try:
                excel_buf = io.BytesIO()
                pd.DataFrame(
                    [{"Title": g["title"], "–∏—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞": g["url"]} for g in st.session_state.generated_links]
                ).to_excel(excel_buf, index=False)
                st.download_button("–°–∫–∞—á–∞—Ç—å Excel —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫", data=excel_buf.getvalue(), file_name="—Å—Å—ã–ª–∫–∏.xlsx")
            except Exception as e:
                csv_buf = io.StringIO()
                pd.DataFrame(
                    [{"Title": g["title"], "–∏—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞": g["url"]} for g in st.session_state.generated_links]
                ).to_csv(csv_buf, index=False, encoding="utf-8")
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å Excel (–Ω—É–∂–µ–Ω openpyxl –∏–ª–∏ xlsxwriter). –û—Ç–¥–∞—é CSV.")
                st.download_button("–°–∫–∞—á–∞—Ç—å CSV —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫", data=csv_buf.getvalue(), file_name="—Å—Å—ã–ª–∫–∏.csv")

    # ======= –ü–†–ê–í–û: –°–û–ö–†–ê–©–ï–ù–ò–ï –°–°–´–õ–û–ö: Short =======
    with bottom_right:
        st.markdown("<h1 style='color:#28EBA4;'>–°–û–ö–†–ê–©–ï–ù–ò–ï –°–°–´–õ–û–ö: Short</h1>", unsafe_allow_html=True)

        use_custom_slugs = st.checkbox("–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª–∞–≥–∏")
        custom_words = ""
        if use_custom_slugs:
            custom_words = st.text_input("2‚Äì3 —Å–ª–æ–≤–∞ (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–≥–æ–≤)")

        # –¥–æ–º–µ–Ω –≤–Ω–∏–∑—É –±–ª–æ–∫–∞
        domain_label_list = list(SHORTIO_PRESETS.keys())
        default_index = domain_label_list.index(DEFAULT_DOMAIN) if DEFAULT_DOMAIN in domain_label_list else 0
        selected_domain_label = st.selectbox("–î–æ–º–µ–Ω Short.io", domain_label_list, index=default_index, key="short_domain")
        active_preset = SHORTIO_PRESETS[selected_domain_label]

        if "manual_shorten_active" not in st.session_state:
            st.session_state.manual_shorten_active = False

        shorten_clicked = st.button("üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫–∏")
        st.caption("—Å–æ–∫—Ä–∞—Ç–∏—Ç—å ref/utm-—Å—Å—ã–ª–∫–∏ –ò–õ–ò –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é")

        if shorten_clicked:
            generated_links = st.session_state.get("generated_links", [])
            if generated_links:
                slugs = generate_custom_slugs(custom_words, need=len(generated_links)) if use_custom_slugs else []
                results = []
                for idx, g in enumerate(generated_links):
                    path = slugs[idx] if idx < len(slugs) else None
                    title = g["title"] or ""
                    res = shortio_create_link(original_url=g["url"], title=title, path=path, preset=active_preset)
                    if "error" in res:
                        st.error(f"–û—à–∏–±–∫–∞ Short.io –ø—Ä–∏ ¬´{g['url']}¬ª: {res.get('error')}")
                        continue
                    short_url = res.get("shortURL") or res.get("shortUrl") or res.get("secureShortURL")
                    if not short_url:
                        st.warning(f"–°—Å—ã–ª–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∞, –Ω–æ –ø–æ–ª–µ shortURL –Ω–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –¥–ª—è ¬´{g['url']}¬ª.")
                        continue
                    results.append({"Title": title, "–∏—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞": g["url"], "—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞": short_url})
                if results:
                    if "shortio_history" not in st.session_state:
                        st.session_state.shortio_history = []
                    st.session_state.shortio_history.extend(results)
            else:
                st.session_state.manual_shorten_active = True

        # —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º (–∫–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç)
        if st.session_state.manual_shorten_active and not st.session_state.get("generated_links"):
            manual_url = st.text_input("–°—Å—ã–ª–∫–∞", key="manual_url")
            manual_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, max_value=1000, value=1, step=1, key="manual_count")

            if st.button("–°–æ–∑–¥–∞—Ç—å —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏"):
                if not manual_url:
                    st.error("–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É.")
                else:
                    virtual = [{"title": "", "url": manual_url.strip()} for _ in range(int(manual_count))]
                    slugs = generate_custom_slugs(custom_words, need=len(virtual)) if use_custom_slugs else []
                    results = []
                    for idx, g in enumerate(virtual):
                        slug = slugs[idx] if idx < len(slugs) else None
                        title = slug or ""
                        res = shortio_create_link(original_url=g["url"], title=title, path=slug, preset=active_preset)
                        if "error" in res:
                            st.error(f"–û—à–∏–±–∫–∞ Short.io –ø—Ä–∏ ¬´{g['url']}¬ª: {res.get('error')}")
                            continue
                        short_url = res.get("shortURL") or res.get("shortUrl") or res.get("secureShortURL")
                        if not short_url:
                            st.warning(f"–°—Å—ã–ª–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∞, –Ω–æ –ø–æ–ª–µ shortURL –Ω–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –¥–ª—è ¬´{g['url']}¬ª.")
                            continue
                        results.append({"Title": title, "–∏—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞": g["url"], "—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞": short_url})
                    if results:
                        if "shortio_history" not in st.session_state:
                            st.session_state.shortio_history = []
                        st.session_state.shortio_history.extend(results)
                        st.session_state.manual_shorten_active = False

        # –ò—Å—Ç–æ—Ä–∏—è ‚Äî —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏, Excel —Å —Ñ–æ–ª–±—ç–∫–æ–º
        if st.session_state.get("shortio_history"):
            st.markdown("#### –ò—Å—Ç–æ—Ä–∏—è Short.io (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)")
            hist_df = pd.DataFrame(st.session_state.shortio_history)[["Title", "–∏—Å—Ö–æ–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞", "—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞"]]
            st.dataframe(hist_df, use_container_width=True)
            try:
                excel_buf2 = io.BytesIO()
                hist_df.to_excel(excel_buf2, index=False)
                st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (Excel)", data=excel_buf2.getvalue(), file_name="shortio_history.xlsx")
            except Exception:
                csv_buf2 = io.StringIO()
                hist_df.to_csv(csv_buf2, index=False, encoding="utf-8")
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å Excel (–Ω—É–∂–µ–Ω openpyxl –∏–ª–∏ xlsxwriter). –û—Ç–¥–∞—é CSV.")
                st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (CSV)", data=csv_buf2.getvalue(), file_name="shortio_history.csv")

    # –∫–Ω–æ–ø–∫–∞ ¬´–í—ã–π—Ç–∏¬ª
    st.divider()
    if st.button("–í—ã–π—Ç–∏"):
        st.session_state.clear()
        st.experimental_rerun()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≠–ö–†–ê–ù –õ–û–ì–ò–ù–ê / –†–û–£–¢–ò–ù–ì ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if not st.session_state.get("authenticated"):
    st.markdown(
        "<div style='text-align:center;margin:40px 0 20px;'>"
        "<img src='https://dumpster.cdn.sports.ru/5/93/bf20303bae2833f0d522d4418ae64.png' width='96'>"
        "</div>",
        unsafe_allow_html=True
    )
    st.markdown("<h2 style='text-align:center;color:#28EBA4;'>Internal tools. Entrance</h2>", unsafe_allow_html=True)
    pwd = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        if pwd == PASSWORD:
            st.session_state["authenticated"] = True
            st.experimental_rerun()
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    st.stop()

# –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Ä–∏—Å—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
render_tools()
