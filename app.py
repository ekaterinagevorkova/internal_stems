# app.py
import io
import zipfile
import re
from itertools import product, permutations

import pandas as pd
from PIL import Image
import streamlit as st
import requests

# –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´
st.set_page_config(page_title="Internal tools", layout="wide")

# –ü–ê–†–û–õ–¨
FALLBACK_PASSWORD = "12345"
PASSWORD = st.secrets.get("password", FALLBACK_PASSWORD)

# === SHORT.IO –°–ï–ö–†–ï–¢–´ ===
# –ë–∞–∑–æ–≤—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã
SHORTIO_DEFAULT_API_KEY = st.secrets.get("shortio_api_key", "PUT_YOUR_SHORTIO_API_KEY")
SHORTIO_DOMAIN_ID = st.secrets.get("216771", "PUT_YOUR_DOMAIN_ID")

# –ú–∞–ø–ø–∏–Ω–≥ "email -> –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API key", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ª–∏—Ü–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –ü—Ä–∏–º–µ—Ä –≤ .streamlit/secrets.toml:
# [shortio_user_keys]
# "e.gevorkova@sports.ru" = "SECRET_KEY_FOR_ELENA"
# "other@sports.ru" = "SECRET_KEY_FOR_OTHER"
SHORTIO_USER_KEYS = st.secrets.get("shortio_user_keys", {})  # dict

def render_tools():
    st.markdown(
        "<div style='text-align: center; margin-bottom: 20px;'>"
        "<img src='https://dumpster.cdn.sports.ru/5/93/bf20303bae2833f0d522d4418ae64.png' width='80'>"
        "</div>",
        unsafe_allow_html=True
    )
    col1, col2 = st.columns(2)

    # ‚îÄ‚îÄ‚îÄ –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    with col1:
        # –ö–û–ù–í–ï–†–¢–û–† PNG‚ÜíWebP
        st.markdown("<h1 style='color:#28EBA4;'>–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø (PNG ‚Üí WebP)</h1>", unsafe_allow_html=True)
        uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PNG-—Ñ–∞–π–ª—ã", type=["png"], accept_multiple_files=True)
        archive_name = st.text_input("–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", placeholder="converted_images")

        if uploaded_files:
            converted_files, converted_filenames = [], []
            for file in uploaded_files:
                image = Image.open(file).convert("RGBA")
                filename = file.name.rsplit(".", 1)[0]
                buffer = io.BytesIO()
                image.save(buffer, format="WEBP", lossless=True)
                converted_files.append(buffer.getvalue())
                converted_filenames.append(filename + ".webp")

            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, "w") as zip_file:
                for name, data in zip(converted_filenames, converted_files):
                    zip_file.writestr(name, data)

            final_name = (archive_name.strip() or "converted_images").replace(" ", "_") + ".zip"
            st.download_button("üì¶ –°–ö–ê–ß–ê–¢–¨ –ê–†–•–ò–í", data=zip_buffer.getvalue(), file_name=final_name, mime="application/zip")

        # –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í HTML (—à–∞–±–ª–æ–Ω—ã)
        st.markdown("<h1 style='color:#28EBA4;'>–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í HTML</h1>", unsafe_allow_html=True)
        templates = {
            "FullScreen (320x480)": """<!DOCTYPE html>...""",
            "Mobile Branding (100%x200px)": """<!DOCTYPE html>...""",
            "1Right (300x600)": """<!DOCTYPE html>...""",
            "Desktop Branding (1920x1080)": """<!DOCTYPE html>...""",
            "Mobile_top (100%x250px)": """<!DOCTYPE html>..."""
        }
        format_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –±–∞–Ω–Ω–µ—Ä–∞", list(templates.keys()))
        image_url = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–∑—É–∞–ª")
        if image_url and format_choice:
            html_code = templates[format_choice].replace("–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï", image_url)
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, "w") as zf:
                zf.writestr("index.html", html_code)
            st.download_button("üì¶ –°–∫–∞—á–∞—Ç—å ZIP —Å index.html", data=zip_buffer.getvalue(),
                               file_name=f"{format_choice.replace(' ', '_')}.zip", mime="application/zip")

    # ‚îÄ‚îÄ‚îÄ –ü–†–ê–í–ê–Ø –ö–û–õ–û–ù–ö–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    with col2:
        # –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–°–´–õ–û–ö
        st.markdown("<h1 style='color:#28EBA4;'>–ì–ï–ù–ï–†–ê–¶–ò–Ø –°–°–´–õ–û–ö</h1>", unsafe_allow_html=True)
        base_url = st.text_input("–û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞")
        link_type = st.radio("–¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", ["ref", "utm"], horizontal=True)

        def parse_multi(value):
            if not value:
                return [""]
            for sep in (",", "\n", " "):
                if sep in value:
                    return [v.strip() for v in value.split(sep) if v.strip()]
            return [value.strip()]

        if link_type == "ref":
            st.markdown("ref-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            show_ref1 = st.checkbox("ref1", value=True, key="toggle_ref1")
            ref_order = ["ref"] + (["ref1"] if show_ref1 else []) + ["ref2", "ref3", "ref4"]
            inputs = {name: st.text_input(name) for name in ref_order}
            if not show_ref1:
                inputs["ref5"] = st.text_input("ref5")
            st.caption("–º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ—Ç–¥–µ–ª—è—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            parsed = {k: parse_multi(v) for k, v in inputs.items()}
        else:
            st.markdown("utm-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            keys = ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term"]
            parsed = {key: parse_multi(st.text_input(key)) for key in keys}

        all_results, varying_key = [], ""
        if base_url:
            lens = {k: len(v) for k, v in parsed.items() if v}
            max_len = max(lens.values()) if lens else 1
            for k in parsed:
                if len(parsed[k]) == max_len:
                    varying_key = k
                    break

            from itertools import product
            combined = list(product(*[parsed[k] if parsed[k] else [""] for k in parsed]))
            keys_list = list(parsed.keys())
            for combo in combined:
                params = "&".join([f"{k}={v}" for k, v in zip(keys_list, combo) if v])
                full_url = f"{base_url}?{params}" if params else base_url
                value = combo[keys_list.index(varying_key)] if varying_key in keys_list else ""
                st.markdown(
                    f"<div style='display:flex;align-items:center;gap:10px;'>"
                    f"<span style='color:#28EBA4;font-weight:bold;min-width:60px'>{value}</span>"
                    f"<code style='word-break:break-all'>{full_url}</code>"
                    f"</div>", unsafe_allow_html=True
                )
                all_results.append({"–§–æ—Ä–º–∞—Ç": value, "–°—Å—ã–ª–∫–∞": full_url, "–í–∏–∑—É–∞–ª": ""})

        if all_results:
            df = pd.DataFrame(all_results)
            excel_buf, csv_buf = io.BytesIO(), io.StringIO()
            df.to_excel(excel_buf, index=False)
            df.to_csv(csv_buf, index=False)
            st.download_button("–°–∫–∞—á–∞—Ç—å Excel", data=excel_buf.getvalue(), file_name="—Å—Å—ã–ª–∫–∏.xlsx")
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV", data=csv_buf.getvalue(), file_name="—Å—Å—ã–ª–∫–∏.csv")

        # === SHORT.IO ‚Äî –°–û–ö–†–ê–©–ï–ù–ò–ï "–û–¢ –ò–ú–ï–ù–ò" –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
        st.markdown("<h1 style='color:#28EBA4;'>SHORT.IO ‚Äî –°–û–ö–†–ê–©–ï–ù–ò–ï</h1>", unsafe_allow_html=True)

        with st.expander("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞", expanded=False):
            st.caption("–ó–∞–ø—Ä–æ—Å—ã –≤ Short.io –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ API-–∫–ª—é—á–∞.")
            # –ö–æ–≥–æ —Å—á–∏—Ç–∞–µ–º ¬´–∞–≤—Ç–æ—Ä–æ–º¬ª –∑–∞–ø—Ä–æ—Å–∞
            user_emails = sorted(set(list(SHORTIO_USER_KEYS.keys()) + ["e.gevorkova@sports.ru"]))
            acting_email = st.selectbox("–û—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", user_emails, index=user_emails.index("e.gevorkova@sports.ru") if "e.gevorkova@sports.ru" in user_emails else 0)
            # –ö–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –ø–æ–π–¥—ë—Ç –≤ Authorization
            effective_api_key = st.text_input(
                "API Key –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                value=SHORTIO_USER_KEYS.get(acting_email, SHORTIO_DEFAULT_API_KEY),
                type="password",
                help="–ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—â–∏–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–ª—é—á."
            )
            domain_id_input = st.text_input("Short.io Domain ID", value=SHORTIO_DOMAIN_ID)

            st.markdown("‚Äî")
            with st.expander("–ö–∞–∫ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —é–∑–µ—Ä—É?"):
                st.caption("–ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–µ–Ω userIdString). "
                           "–ì–¥–µ –≤–∑—è—Ç—å ID: –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/URL –≤ –∞–¥–º–∏–Ω–∫–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏. "
                           "–ì–∏–¥ –ø–æ ID: Help ‚Üí *How to retrieve domain, link and folder identifiers‚Ä¶*")
                grant_permission = st.checkbox("–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", value=True)
                target_user_id = st.text_input("userIdString –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: abCDefGhijkLMNO77")

        st.caption("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–ª–∞–≥/–∑–∞–≥–æ–ª–æ–≤–æ–∫.")
        long_url_shortio = st.text_input("–î–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è Short.io", key="shortio_long_url")
        custom_path = st.text_input("–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ª–∞–≥ (path), –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ", key="shortio_path", placeholder="naprimer-akciya-001")
        link_title = st.text_input("–ó–∞–≥–æ–ª–æ–≤–æ–∫ (title), –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ", key="shortio_title")

        if "shortio_history" not in st.session_state:
            st.session_state.shortio_history = []

        def create_short_link(original_url, path=None, title=None, api_key=None, domain_id=None):
            if not api_key or not domain_id:
                return {"error": "API Key –∏–ª–∏ Domain ID –ø—É—Å—Ç—ã."}
            headers = {
                "accept": "application/json",
                "content-type": "application/json",
                "authorization": api_key  # ‚Üê –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
            }
            payload = {"originalURL": original_url, "domainId": domain_id}
            if path:
                payload["path"] = path.strip()
            if title:
                payload["title"] = title.strip()
            try:
                r = requests.post("https://api.short.io/links", json=payload, headers=headers, timeout=20)
                data = {}
                try:
                    data = r.json()
                except Exception:
                    data = {"raw_text": r.text}
                if r.status_code >= 400:
                    return {"error": f"HTTP {r.status_code}", "details": data}
                return data
            except requests.RequestException as e:
                return {"error": "Network/Request error", "details": str(e)}

        def add_link_permission(domain_id, link_id, user_id, api_key):
            """–í—ã–¥–∞—ë—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ userIdString)."""
            if not (domain_id and link_id and user_id and api_key):
                return {"error": "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç domainId/linkId/userId/api_key"}
            headers = {
                "accept": "application/json",
                "content-type": "application/json",
                "authorization": api_key
            }
            url = f"https://api.short.io/links/permissions/{domain_id}/{link_id}/{user_id}"
            try:
                r = requests.post(url, headers=headers, timeout=20)
                try:
                    data = r.json()
                except Exception:
                    data = {"raw_text": r.text}
                if r.status_code >= 400:
                    return {"error": f"HTTP {r.status_code}", "details": data}
                return data
            except requests.RequestException as e:
                return {"error": "Network/Request error", "details": str(e)}

        if st.button("üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Short.io (–æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"):
            if not long_url_shortio:
                st.error("–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É.")
            else:
                # 1) –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = create_short_link(
                    original_url=long_url_shortio.strip(),
                    path=custom_path.strip() if custom_path else None,
                    title=link_title.strip() if link_title else None,
                    api_key=effective_api_key.strip(),
                    domain_id=domain_id_input.strip()
                )
                if "error" in result:
                    st.error(f"–û—à–∏–±–∫–∞ Short.io: {result.get('error')}")
                    if "details" in result:
                        st.code(result["details"])
                else:
                    short_url = result.get("shortURL") or result.get("shortUrl") or result.get("secureShortURL")
                    link_id = result.get("idString") or result.get("id")  # idString ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ
                    if short_url:
                        st.success(f"–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞: {short_url}")
                        st.write("–û—Ç–≤–µ—Ç API:")
                        st.json(result)
                        st.session_state.shortio_history.append({
                            "–î–ª–∏–Ω–Ω–∞—è": long_url_shortio.strip(),
                            "–ö–æ—Ä–æ—Ç–∫–∞—è": short_url,
                            "Path": custom_path or result.get("path", ""),
                            "Title": link_title or result.get("title", ""),
                            "–ê–≤—Ç–æ—Ä (–∫–ª—é—á)": acting_email
                        })

                        # 2) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¥–æ–±–∞–≤–∏–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        if grant_permission and target_user_id and link_id:
                            perm_res = add_link_permission(domain_id_input.strip(), link_id, target_user_id.strip(), effective_api_key.strip())
                            if "error" in perm_res:
                                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞: {perm_res.get('error')}")
                                if "details" in perm_res:
                                    st.code(perm_res["details"])
                            else:
                                st.info("–ü—Ä–∞–≤–∞ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã–¥–∞–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                    else:
                        st.warning("–£—Å–ø–µ—Ö, –Ω–æ –ø–æ–ª–µ shortURL –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–º. RAW JSON –Ω–∏–∂–µ.")
                        st.json(result)

        if st.session_state.shortio_history:
            st.markdown("#### –ò—Å—Ç–æ—Ä–∏—è Short.io (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)")
            hist_df = pd.DataFrame(st.session_state.shortio_history)
            st.dataframe(hist_df, use_container_width=True)
            excel_buf2, csv_buf2 = io.BytesIO(), io.StringIO()
            hist_df.to_excel(excel_buf2, index=False)
            hist_df.to_csv(csv_buf2, index=False)
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (Excel)", data=excel_buf2.getvalue(), file_name="shortio_history.xlsx")
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (CSV)", data=csv_buf2.getvalue(), file_name="shortio_history.csv")

        # –ì–ï–ù–ï–†–ê–¢–û–† –°–õ–ê–ì–û–í
        st.markdown("<h1 style='color:#28EBA4;'>–°–õ–ê–ì–ò –î–õ–Ø –°–°–´–õ–û–ö</h1>", unsafe_allow_html=True)
        words_raw = st.text_input("2‚Äì3 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é", key="slug_words", placeholder="")
        if words_raw:
            words = [w.lower() for w in re.split(r"[\s,]+", words_raw.strip()) if w]
            if 2 <= len(words) <= 3:
                from itertools import permutations as _perms
                seps = ['-', '_', '.']
                combos = {sep.join(p) for p in _perms(words) for sep in seps}
                slugs = sorted(combos, key=lambda s: (len(s), s))
                st.text_area("–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–∞–≥–æ–≤", value="\n".join(slugs), height=200)
            else:
                st.caption("–í–≤–µ–¥–∏—Ç–µ –æ—Ç 2 –¥–æ 3 —Å–ª–æ–≤.")

    st.divider()
    if st.button("–í—ã–π—Ç–∏"):
        st.session_state.clear()
        st.rerun()

# –≠–ö–†–ê–ù –õ–û–ì–ò–ù–ê –ò –†–û–£–¢–ò–ù–ì
if not st.session_state.get("authenticated"):
    st.markdown(
        "<div style='text-align:center;margin:40px 0 20px;'>"
        "<img src='https://dumpster.cdn.sports.ru/5/93/bf20303bae2833f0d522d4418ae64.png' width='96'>"
        "</div>",
        unsafe_allow_html=True
    )
    st.markdown("<h2 style='text-align:center;color:#28EBA4;'>Internal tools. Entrance</h2>", unsafe_allow_html=True)
    pwd = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        if pwd == PASSWORD:
            st.session_state["authenticated"] = True
            st.rerun()
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    st.stop()

render_tools()








