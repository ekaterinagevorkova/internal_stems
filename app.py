# app.py
import io
import zipfile
import re
from itertools import product, permutations

import pandas as pd
from PIL import Image
import streamlit as st
import requests  # === SHORT.IO ===

# –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´
st.set_page_config(page_title="Internal tools", layout="wide")

# –ü–ê–†–û–õ–¨: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ st.secrets["password"], –∏–Ω–∞—á–µ fallback
FALLBACK_PASSWORD = "12345"
PASSWORD = st.secrets.get("password", FALLBACK_PASSWORD)

# === SHORT.IO ===
# –î–µ—Ñ–æ–ª—Ç—ã: –±–µ—Ä–µ–º –∏–∑ secrets, –∏–Ω–∞—á–µ ‚Äî –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
SHORTIO_API_KEY = st.secrets.get("shortio_api_key", "pk_7MeATLI4vJg1ZyYS")
SHORTIO_DOMAIN_ID = st.secrets.get("shortio_domain_id", "216771")  # —Å—Ç—Ä–æ–∫–æ–π, –Ω–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–º –∫ int

# –°–¢–†–ê–ù–ò–¶–ê –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í (–±–µ–∑ set_page_config)
def render_tools():
    st.markdown(
        "<div style='text-align: center; margin-bottom: 20px;'>"
        "<img src='https://dumpster.cdn.sports.ru/5/93/bf20303bae2833f0d522d4418ae64.png' width='80'>"
        "</div>",
        unsafe_allow_html=True
    )
    col1, col2 = st.columns(2)

    # ‚îÄ‚îÄ‚îÄ –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    with col1:
        # –ö–û–ù–í–ï–†–¢–û–† (PNG -> WebP)
        st.markdown("<h1 style='color:#28EBA4;'>–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø (PNG ‚Üí WebP)</h1>", unsafe_allow_html=True)
        uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PNG-—Ñ–∞–π–ª—ã", type=["png"], accept_multiple_files=True)
        archive_name = st.text_input("–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", placeholder="converted_images")

        if uploaded_files:
            converted_files = []
            converted_filenames = []

            for file in uploaded_files:
                image = Image.open(file).convert("RGBA")
                filename = file.name.rsplit(".", 1)[0]
                buffer = io.BytesIO()
                # lossless=True –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ quality=90/method=6 –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
                image.save(buffer, format="WEBP", lossless=True)
                converted_files.append(buffer.getvalue())
                converted_filenames.append(filename + ".webp")

            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, "w") as zip_file:
                for name, data in zip(converted_filenames, converted_files):
                    zip_file.writestr(name, data)

            final_name = (archive_name.strip() or "converted_images").replace(" ", "_") + ".zip"
            st.download_button(
                "üì¶ –°–ö–ê–ß–ê–¢–¨ –ê–†–•–ò–í",
                data=zip_buffer.getvalue(),
                file_name=final_name,
                mime="application/zip"
            )

        # –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í HTML
        st.markdown("<h1 style='color:#28EBA4;'>–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í HTML</h1>", unsafe_allow_html=True)

        templates = {
            "FullScreen (320x480)": """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="ad.size" content="width=320px,height=480px">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AdFox Banner</title>
  <link rel="stylesheet" href="https://dumpster.cdn.sports.ru/0/52/558ad552e5e0256fae54ff7fc6d8c.css">
</head>
<body>
  <a href="%banner.reference_mrc_user1%" target="%banner.target%" style="display:block;width:100%;height:100%;text-decoration:none;cursor:pointer;">
    <div class="banner" style="width:100%;height:100%;">
      <img src="–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï" alt="–±–∞–Ω–Ω–µ—Ä" style="width:100%;height:100%;display:block;">
    </div>
  </a>
</body>
</html>""",
            "Mobile Branding (100%x200px)": """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="ad.size" content="width=100%,height=200px">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AdFox Banner</title>
  <link rel="stylesheet" href="https://dumpster.cdn.sports.ru/e/4d/85f288418a95f555eb5035aebed92.css">
</head>
<body>
  <a href="%banner.reference_mrc_user1%" target="%banner.target%" style="display:block;width:100%;height:100%;text-decoration:none;cursor:pointer;">
    <div class="banner" style="width:100%;height:100%;">
      <img src="–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï" alt="–±–∞–Ω–Ω–µ—Ä" style="width:100%;height:100%;display:block;">
    </div>
  </a>
</body>
</html>""",
            "1Right (300x600)": """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="ad.size" content="width=300px,height=600px">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AdFox Banner</title>
  <link rel="stylesheet" href="https://dumpster.cdn.sports.ru/2/96/4af4f5dcdeb75f36b9197556810c8.css">
</head>
<body>
  <a href="%banner.reference_mrc_user1%" target="%banner.target%" style="display:block;width:100%;height:100%;text-decoration:none;cursor:pointer;">
    <div class="banner" style="width:100%;height:100%;">
      <img src="–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï" alt="–±–∞–Ω–Ω–µ—Ä" style="width:100%;height:100%;display:block;">
    </div>
  </a>
</body>
</html>""",
            "Desktop Branding (1920x1080)": """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="ad.size" content="width=1920,height=1080">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AdFox Banner</title>
  <link rel="stylesheet" href="https://dumpster.cdn.sports.ru/f/a3/a35026ae42d4e609a322ffb220623.css">
</head>
<body>
  <a href="%banner.reference_mrc_user1%" target="%banner.target%" style="display:block;width:100%;height:100%;text-decoration:none;cursor:pointer;">
    <div class="banner" style="width:100%;height:100%;">
      <img src="–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï" alt="–±–∞–Ω–Ω–µ—Ä" style="width:100%;height:100%;display:block;">
    </div>
  </a>
</body>
</html>""",
            "Mobile_top (100%x250px)": """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="ad.size" content="width=100%,height=250px">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AdFox Banner</title>
  <link rel="stylesheet" href="https://dumpster.cdn.sports.ru/9/58/782b7c244f327056–µ145d297c6f4b.css">
</head>
<body>
  <a href="%banner.reference_mrc_user1%" target="%banner.target%" style="display:block;width:100%;height:100%;text-decoration:none;cursor:pointer;">
    <div class="banner" style="width:100%;height:100%;">
      <img src="–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï" alt="–±–∞–Ω–Ω–µ—Ä" style="width:100%;height:100%;display:block;">
    </div>
  </a>
</body>
</html>"""
        }

        format_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –±–∞–Ω–Ω–µ—Ä–∞", list(templates.keys()))
        image_url = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–∑—É–∞–ª")

        if image_url and format_choice:
            html_code = templates[format_choice].replace("–°–°–´–õ–ö–ê –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï", image_url)
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, "w") as zf:
                zf.writestr("index.html", html_code)
            st.download_button(
                "üì¶ –°–∫–∞—á–∞—Ç—å ZIP —Å index.html",
                data=zip_buffer.getvalue(),
                file_name=f"{format_choice.replace(' ', '_')}.zip",
                mime="application/zip"
            )

    # ‚îÄ‚îÄ‚îÄ –ü–†–ê–í–ê–Ø –ö–û–õ–û–ù–ö–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    with col2:
        # –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–°–´–õ–û–ö
        st.markdown("<h1 style='color:#28EBA4;'>–ì–ï–ù–ï–†–ê–¶–ò–Ø –°–°–´–õ–û–ö</h1>", unsafe_allow_html=True)
        base_url = st.text_input("–û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞")
        link_type = st.radio("–¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", ["ref", "utm"], horizontal=True)

        def parse_multi(value):
            if not value:
                return [""]
            if "," in value:
                return [v.strip() for v in value.split(",") if v.strip()]
            if "\n" in value:
                return [v.strip() for v in value.split("\n") if v.strip()]
            if " " in value:
                return [v.strip() for v in value.split(" ") if v.strip()]
            return [value.strip()]

        if link_type == "ref":
            st.markdown("ref-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

            # —á–µ–∫–±–æ–∫—Å ref1
            show_ref1 = st.checkbox("ref1", value=True, key="toggle_ref1")

            # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π:
            ref_order = ["ref"] + (["ref1"] if show_ref1 else []) + ["ref2", "ref3", "ref4"]

            inputs = {}
            for name in ref_order:
                inputs[name] = st.text_input(name)

            # –ï—Å–ª–∏ ref1 –æ—Ç–∫–ª—é—á—ë–Ω
            if not show_ref1:
                inputs["ref5"] = st.text_input("ref5")

            # –ø–æ–¥—Å–∫–∞–∑–∫–∞
            st.caption("–º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ—Ç–¥–µ–ª—è—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—è –≤ —Å–ø–∏—Å–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
            parsed = {k: parse_multi(v) for k, v in inputs.items()}

        else:
            st.markdown("utm-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            keys = ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term"]
            ref_inputs = [st.text_input(key) for key in keys]
            parsed = {key: parse_multi(val) for key, val in zip(keys, ref_inputs)}

        all_results = []
        varying_key = ""

        if base_url:
            lens = {k: len(v) for k, v in parsed.items() if v}
            max_len = max(lens.values()) if lens else 1
            for k in parsed:
                if len(parsed[k]) == max_len:
                    varying_key = k
                    break

            combined = list(product(*[parsed[k] if parsed[k] else [""] for k in parsed]))
            keys_list = list(parsed.keys())

            for combo in combined:
                params = "&".join([f"{k}={v}" for k, v in zip(keys_list, combo) if v])
                full_url = f"{base_url}?{params}" if params else base_url
                value = combo[keys_list.index(varying_key)] if varying_key in keys_list else ""
                st.markdown(
                    f"<div style='display: flex; align-items: center; gap: 10px;'>"
                    f"<span style='color: #28EBA4; font-weight: bold; min-width: 60px'>{value}</span>"
                    f"<code style='word-break: break-all'>{full_url}</code>"
                    f"</div>",
                    unsafe_allow_html=True
                )
                all_results.append({"–§–æ—Ä–º–∞—Ç": value, "–°—Å—ã–ª–∫–∞": full_url, "–í–∏–∑—É–∞–ª": ""})

        if all_results:
            df = pd.DataFrame(all_results)
            excel_buf = io.BytesIO()
            csv_buf = io.StringIO()
            df.to_excel(excel_buf, index=False)
            df.to_csv(csv_buf, index=False)

            st.download_button("–°–∫–∞—á–∞—Ç—å Excel", data=excel_buf.getvalue(), file_name="—Å—Å—ã–ª–∫–∏.xlsx")
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV", data=csv_buf.getvalue(), file_name="—Å—Å—ã–ª–∫–∏.csv")

        # === SHORT.IO === –ë–õ–û–ö: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ + –ª–æ–∫–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
        st.markdown("<h1 style='color:#28EBA4;'>SHORT.IO ‚Äî –°–û–ö–†–ê–©–ï–ù–ò–ï</h1>", unsafe_allow_html=True)

        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–∞—à–∏–º –∫–ª—é—á–æ–º –∏ –¥–æ–º–µ–Ω–æ–º
        with st.expander("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä—É—Ç—Å—è –∏–∑ st.secrets)", expanded=False):
            api_key_input = st.text_input(
                "Short.io API Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)",
                value=SHORTIO_API_KEY,
                type="password"
            )
            domain_id_input = st.text_input(
                "Short.io Domain ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)",
                value=str(SHORTIO_DOMAIN_ID)
            )

        st.caption("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ª–∞–≥/–∑–∞–≥–æ–ª–æ–≤–æ–∫. –ï—Å–ª–∏ —Å–ª–∞–≥ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî Short.io —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–≥–æ —Å–∞–º.")

        long_url_shortio = st.text_input("–î–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è Short.io", key="shortio_long_url")
        custom_path = st.text_input("–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ª–∞–≥ (path), –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ", key="shortio_path", placeholder="naprimer-akciya-001")
        link_title = st.text_input("–ó–∞–≥–æ–ª–æ–≤–æ–∫ (title), –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ", key="shortio_title")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–µ—Å—Å–∏–∏
        if "shortio_history" not in st.session_state:
            st.session_state.shortio_history = []

        def _coerce_domain_id(domain_id_str: str):
            try:
                return int(str(domain_id_str).strip())
            except Exception:
                return str(domain_id_str).strip()

        def create_short_link(original_url, path=None, title=None, api_key=None, domain_id=None):
            api_key = (api_key or "").strip()
            domain_id = _coerce_domain_id(domain_id or "")

            if not api_key or not domain_id:
                return {"error": "API Key –∏–ª–∏ Domain ID –ø—É—Å—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."}

            url = "https://api.short.io/links"
            headers = {
                "accept": "application/json",
                "content-type": "application/json",
                "authorization": api_key
            }
            payload = {
                "originalURL": original_url,
                "domainId": domain_id  # int, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
            }
            if path:
                payload["path"] = path.strip()
            if title:
                payload["title"] = title.strip()

            try:
                r = requests.post(url, json=payload, headers=headers, timeout=20)
                data = {}
                try:
                    data = r.json()
                except Exception:
                    data = {"raw_text": r.text}

                if r.status_code >= 400:
                    return {"error": f"HTTP {r.status_code}", "details": data}

                return data
            except requests.RequestException as e:
                return {"error": "Network/Request error", "details": str(e)}

        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        if st.button("üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Short.io"):
            if not long_url_shortio:
                st.error("–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É.")
            else:
                result = create_short_link(
                    original_url=long_url_shortio.strip(),
                    path=custom_path.strip() if custom_path else None,
                    title=link_title.strip() if link_title else None,
                    api_key=api_key_input,
                    domain_id=domain_id_input
                )
                if "error" in result:
                    st.error(f"–û—à–∏–±–∫–∞ Short.io: {result.get('error')}")
                    if "details" in result:
                        st.code(result["details"])
                else:
                    short_url = result.get("shortURL") or result.get("shortUrl") or result.get("secureShortURL")
                    if short_url:
                        st.success(f"–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞: {short_url}")
                        st.write("–û—Ç–≤–µ—Ç API:")
                        st.json(result)

                        # –î–æ–±–∞–≤–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                        st.session_state.shortio_history.append({
                            "–î–ª–∏–Ω–Ω–∞—è": long_url_shortio.strip(),
                            "–ö–æ—Ä–æ—Ç–∫–∞—è": short_url,
                            "Path": custom_path or result.get("path", ""),
                            "Title": link_title or result.get("title", ""),
                        })
                    else:
                        st.warning("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª–µ shortURL –≤ –æ—Ç–≤–µ—Ç–µ. –°–º–æ—Ç—Ä–∏—Ç–µ RAW JSON.")
                        st.json(result)

        # –ò—Å—Ç–æ—Ä–∏—è
        if st.session_state.shortio_history:
            st.markdown("#### –ò—Å—Ç–æ—Ä–∏—è Short.io (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)")
            hist_df = pd.DataFrame(st.session_state.shortio_history)
            st.dataframe(hist_df, use_container_width=True)

            excel_buf = io.BytesIO()
            csv_buf = io.StringIO()
            hist_df.to_excel(excel_buf, index=False)
            hist_df.to_csv(csv_buf, index=False)

            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (Excel)", data=excel_buf.getvalue(), file_name="shortio_history.xlsx")
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (CSV)", data=csv_buf.getvalue(), file_name="shortio_history.csv")

        # –ì–ï–ù–ï–†–ê–¢–û–† –°–õ–ê–ì–û–í
        st.markdown("<h1 style='color:#28EBA4;'>–°–õ–ê–ì–ò –î–õ–Ø –°–°–´–õ–û–ö</h1>", unsafe_allow_html=True)
        words_raw = st.text_input("2‚Äì3 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é", key="slug_words", placeholder="")

        if words_raw:
            # —Ä–∞–∑–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥ + –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            words = [w.lower() for w in re.split(r"[\s,]+", words_raw.strip()) if w]
            if 2 <= len(words) <= 3:
                seps = ['-', '_', '.']
                combos = set()
                for p in permutations(words):
                    for sep in seps:
                        combos.add(sep.join(p))
                slugs = sorted(combos, key=lambda s: (len(s), s))
                text_blob = "\n".join(slugs)
                st.text_area("–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–∞–≥–æ–≤", value=text_blob, height=200)
            else:
                st.caption("–í–≤–µ–¥–∏—Ç–µ –æ—Ç 2 –¥–æ 3 —Å–ª–æ–≤.")

    # –ö–Ω–æ–ø–∫–∞ ¬´–í—ã–π—Ç–∏¬ª (—Å–±—Ä–æ—Å–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)
    st.divider()
    if st.button("–í—ã–π—Ç–∏"):
        st.session_state.clear()
        st.rerun()

# –≠–ö–†–ê–ù –õ–û–ì–ò–ù–ê –ò –†–û–£–¢–ò–ù–ì
if not st.session_state.get("authenticated"):
    st.markdown(
        "<div style='text-align:center;margin:40px 0 20px;'>"
        "<img src='https://dumpster.cdn.sports.ru/5/93/bf20303bae2833f0d522d4418ae64.png' width='96'>"
        "</div>",
        unsafe_allow_html=True
    )
    st.markdown("<h2 style='text-align:center;color:#28EBA4;'>Internal tools. Entrance</h2>", unsafe_allow_html=True)
    pwd = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        if pwd == PASSWORD:
            st.session_state["authenticated"] = True
            st.rerun()
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    st.stop()

# –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Ä–∏—Å—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
render_tools()









